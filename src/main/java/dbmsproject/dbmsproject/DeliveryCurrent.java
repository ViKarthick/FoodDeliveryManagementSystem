/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dbmsproject.dbmsproject;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author HP
 */
public class DeliveryCurrent extends javax.swing.JFrame {
    private String deliveryGuyId;
    Connection con;
    /**
     * Creates new form DeliveryCurrent
     */
    public DeliveryCurrent(String deliveryGuyId) 
    {
        this.deliveryGuyId = deliveryGuyId;
        initComponents();
        con = getConnection();
        viewCustomerDetails();
        idField.setText(deliveryGuyId);
        updateOrderCount();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        detailsTextArea = new javax.swing.JTextArea();
        idField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        detailsTextArea.setColumns(20);
        detailsTextArea.setRows(5);
        jScrollPane2.setViewportView(detailsTextArea);

        idField.setEditable(false);

        jLabel1.setText("Id:");

        jButton1.setText("Finish Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(33, 33, 33)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

       
        new DeliveryOption(deliveryGuyId).setVisible(true);
this.setVisible(false);// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateOrders();
        idField.setText("");// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    private void updateOrderCount() {
        try {
            // Count undelivered orders for the delivery guy
            PreparedStatement countStatement = con.prepareStatement(
                    "SELECT COUNT(*) AS order_count FROM orders WHERE delivery_guy_id = ? AND delivered = 0");
            countStatement.setString(1, deliveryGuyId);
            
            ResultSet countResult = countStatement.executeQuery();

            if (countResult.next()) {
                int orderCount = countResult.getInt("order_count");
                // Update delivery_guy table with the new order count
                PreparedStatement updateCountStatement = con.prepareStatement(
                        "UPDATE delivery_guy SET order_count = ? WHERE delivery_guy_id = ?");
                updateCountStatement.setInt(1, orderCount);
                updateCountStatement.setString(2, deliveryGuyId);
                updateCountStatement.executeUpdate();
                updateCountStatement.close();
            }

            countResult.close();
            countStatement.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

    private void viewCustomerDetails() 
    {
        try 
        {
            // Query orders_table to get cust_id
            PreparedStatement ordersStatement = con.prepareStatement(
                    "SELECT cust_id FROM orders WHERE delivery_guy_id = ? and delivered = 0");
            ordersStatement.setString(1, deliveryGuyId);
            ResultSet ordersResult = ordersStatement.executeQuery();

            if (ordersResult.next()) 
            {
                String custId = ordersResult.getString("cust_id");
                // Query customer table to get customer details
                PreparedStatement customerStatement = con.prepareStatement(
                        "SELECT cust_name, ph_no, flat_no, street_name, area_id FROM customer WHERE cust_id = ?");
                customerStatement.setString(1, custId);
                ResultSet customerResult = customerStatement.executeQuery();
                StringBuilder details = new StringBuilder();
                
        int c = 0;
        if (customerResult.next()) 
        {
            String custName = customerResult.getString("cust_name");
            String custPhone = customerResult.getString("ph_no");
            String flatNo = customerResult.getString("flat_no");
            String streetName = customerResult.getString("street_name");
            int areaId = customerResult.getInt("area_id");

            // Query area table to get area name
            String areaName = getAreaName(areaId);

            // Append customer details to the StringBuilder
            details.append("Customer Details:\n")
                   .append("Name: ").append(custName).append("\n")
                   .append("Phone: ").append(custPhone).append("\n")
                   .append("Address: ").append(flatNo).append(", ").append(streetName).append(", ").append(areaName)
                   .append("\n\n"); // Separate records with double newline
            // Check if any records were found
            if (details.length() > 0) 
            {
                detailsTextArea.append(details.toString());
                c=1;
            } else if(c == 0) {
                detailsTextArea.append("No customers found.");
                ;
            }

        }

                customerResult.close();
                customerStatement.close();
            }

            ordersResult.close();
            ordersStatement.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
    // Method to get area name based on area_id
    private String getAreaName(int areaId) {
        String areaName = "";
        try {
            PreparedStatement areaStatement = con.prepareStatement(
                    "SELECT area_name FROM area WHERE area_id = ?");
            areaStatement.setInt(1, areaId);
            ResultSet areaResult = areaStatement.executeQuery();

            if (areaResult.next()) {
                areaName = areaResult.getString("area_name");
            }

            areaResult.close();
            areaStatement.close();

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
            ex.printStackTrace();
        }
        return areaName;
    }

    // Method to establish database connection
    private Connection getConnection() {
        Connection con = null;
        try {
            Class.forName("oracle.jdbc.OracleDriver");
            con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@LAPTOP-9M301MNP:1522:orcl",
                    "scott",
                    "boomthakkali"
            );
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to connect to database: " + ex.getMessage());
        }
        return con;
    }
    private void updateOrders() {
    try {
        // Update order_count to 0 for the delivery guy
        PreparedStatement updateCountStatement = con.prepareStatement(
                "UPDATE delivery_guy SET order_count = 0 WHERE delivery_guy_id = ?");
        updateCountStatement.setString(1, deliveryGuyId);
        updateCountStatement.executeUpdate();
        updateCountStatement.close();

        // Mark all orders for the delivery guy as delivered
        PreparedStatement updateOrdersStatement = con.prepareStatement(
                "UPDATE orders SET delivered = 1 WHERE delivery_guy_id = ? and delivered = 0");
        updateOrdersStatement.setString(1, deliveryGuyId);
        updateOrdersStatement.executeUpdate();
        updateOrdersStatement.close();

        JOptionPane.showMessageDialog(this, "Delivered successfully!");
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "SQL Error: " + ex.getMessage());
        ex.printStackTrace();
    }
}
    public static void main(String deliveryguyId) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeliveryCurrent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeliveryCurrent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeliveryCurrent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeliveryCurrent.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeliveryCurrent(deliveryguyId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea detailsTextArea;
    private javax.swing.JTextField idField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
